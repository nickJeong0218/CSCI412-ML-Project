# -*- coding: utf-8 -*-
"""ML_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M0w64pxJz-orQnppC7gbGhTWqL3hZSJF
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import numpy as np
from sklearn.preprocessing import PolynomialFeatures
from sklearn.preprocessing import SplineTransformer



#Imports all the data given a file path and takes care of any NULL values.
def openData(path):
  df = pd.read_csv(path)

  # Replace "Not Available" with NaN
  df.replace("Not Available", pd.NA, inplace=True)

  # Convert columns to numeric (if not already)
  df = df.apply(pd.to_numeric, errors='ignore')

  # Calculate mean of each column
  # Check the initial use of each fuel, and put 0 for the period before that time
  df.fillna(0, inplace=True)
  print("Nulls replaced with 0")
  return df



def visulizeDataScatter(df):

  # Extract year from 'Month' column and convert it to numeric this is for formating of graphs
  df['Year'] = pd.to_numeric(df['Month'].str.split().str[0])


  # Create subplots
  plt.figure(figsize=(50, 20))

  #Drops the last loop as its year vs year
  for i, feature in enumerate(df.columns[1:-1], 1):
    plt.subplot(2, 6, i)
    plt.scatter(x=df['Year'], y=df[feature])
    plt.xlabel('Year')
    plt.ylabel(feature)

  plt.show()

def visulizeDataLine(df):
  #Extract year from 'Month' column and convert it to numeric
  df['Year'] = pd.to_numeric(df['Month'].str.split().str[0])

  #Group by 'Year' and calculate the mean for each year
  average_per_year = df.groupby('Year').mean(numeric_only=True)

  #line plot for the average values per year
  plt.figure(figsize=(15, 8))
  for feature in average_per_year.columns[:-5]:
      plt.plot(average_per_year.index, average_per_year[feature], label=feature)

  plt.xlabel('Year')
  plt.ylabel('BCU PER TRILLION')
  plt.legend(loc='upper left', bbox_to_anchor=(1, 1))
  plt.grid(True)
  plt.show()


def visulizeLinearRegression(df):
  fig = plt.figure(figsize=(50,30))

  for i, feature in enumerate(df.columns[1:-1], 1):
    X = df[["Year"]]
    y = df[[feature]]

    lin_model = LinearRegression()
    lin_model.fit(X, y)

    ax = fig.add_subplot(3,5,i)

    ax.scatter(X, y, color='gray')

    ax.plot(X, lin_model.predict(X),color='red')
    ax.set_title(f'{feature} on Year')
    ax.set_xlabel('Year')
    ax.set_ylabel(feature)

  plt.show()


def visulizePolynomialFeatures(df):
  fig = plt.figure(figsize=(50,30))

  for i, feature in enumerate(df.columns[1:-1], 1):
    X = df[["Year"]]
    y = df[[feature]]

    poly = PolynomialFeatures(degree=(1,10), include_bias=False)
    X_poly = poly.fit_transform(X)

    lin_model = LinearRegression()
    lin_model.fit(X_poly, y)

    ax = fig.add_subplot(3,5,i)

    ax.scatter(X, y, color='gray')

    ax.plot(X, lin_model.predict(X_poly),color='red')
    ax.set_title(f'{feature} on Year')
    ax.set_xlabel('Year')
    ax.set_ylabel(feature)

  plt.show()


def visulizeSplineTransformer(df):
  fig = plt.figure(figsize=(50,30))

  for i, feature in enumerate(df.columns[1:-1], 1):
    X = df[["Year"]]
    y = df[[feature]]

    spline_transformer = SplineTransformer(n_knots=5,degree=6,include_bias=False)
    X_transform = spline_transformer.fit_transform(X)

    lin_model = LinearRegression()
    lin_model.fit(X_transform, y)

    ax = fig.add_subplot(3,5,i)

    ax.scatter(X, y, color='gray')

    ax.plot(X, lin_model.predict(X_transform),color='red')
    ax.set_title(f'{feature} on Year')
    ax.set_xlabel('Year')
    ax.set_ylabel(feature)

  plt.show()




def mainCall():

  print("Dataset 1 opening")#Use CO2_Emissions_From_Energy_Consumption_Transportation
  data1 = openData("CO2_Emissions_From_Energy_Consumption_Transportation.csv")
  print("Loaded dataset 1 \n")

  print("Dataset 1 opening")#Use Transportation_Data_-_Monthly_Data
  data2 = openData("Transportation_Data_-_Monthly_Data.csv")
  print("Loaded dataset 1 \n")

  print("Visulizations are from CO2 Emissions from consumption")
  print("\nvisulize Data Scatter plot")
  visulizeDataScatter(data1)
  print("Observations: ")
  print("\nvisulize Data Line")
  visulizeDataLine(data1)
  print("Observations: ")
  print("\nvisulize Linear Regression")
  visulizeLinearRegression(data1)
  print("Observations: ")
  print("\nvisulize Polynomial Features")
  visulizePolynomialFeatures(data1)
  print("Observations: ")
  print("\nvisulize Spline Transformer")
  visulizeSplineTransformer(data1)
  print("Observations: ")


  print("\n\n\n\n")
  print("Visulizations are from monthly transportaion data")
  print("\nvisulize Data Scatter")
  visulizeDataScatter(data2)
  print("Observations: ")
  print("\nvisulize Data Line")
  visulizeDataLine(data2)
  print("Observations: ")
  print("\nvisulize Linear Regression")
  visulizeLinearRegression(data2)
  print("Observations: ")
  print("\nvisulize Polynomial Features")
  visulizePolynomialFeatures(data2)
  print("Observations: ")
  print("\nvisulize Spline Transformer")
  visulizeSplineTransformer(data2)
  print("Observations: ")



mainCall()