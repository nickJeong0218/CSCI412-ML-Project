# -*- coding: utf-8 -*-
"""ML_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IG3b0b-A_L92sBriOMjjDcJMNwXZh1nn

# Problem statement

As CO2 emission are on the rise and the transportation sector produces roughly 26% of all emissions. There needs to be a change on how we view the fuels we choose to use. We need clear information on how  these fuelâ€™s effect CO2 emissions in the future.

# Import Datasets

Data being used is sourced from the EIA as a monthly dataset from the USA transportation sector. The data set can be found in section 2.2 at:

*   https://www.eia.gov/totalenergy/data/monthly/
*   https://www.eia.gov/totalenergy/data/monthly/#environment



Download for data raw:
https://www.eia.gov/totalenergy/data/browser/xls.php?tbl=T02.05&freq=m

*   https://www.eia.gov/totalenergy/data/browser/xls.php?tbl=T02.05&freq=m
*   https://www.eia.gov/totalenergy/data/browser/index.php?tbl=T11.05#/?f=M&start=200001
*   https://www.eia.gov/totalenergy/data/browser/index.php?tbl=T11.07#/?f=M



Download for modified data:https://docs.google.com/spreadsheets/d/11AQ37wdHwwgXyAPWROtKe-Dsx9sb8LTaygj88tlAPPM/edit?usp=sharing

Download for modified data:https://drive.google.com/file/d/13OwKKJ8ksppC3Vw6MB49SlvLTTfGhAwk/view?usp=sharing
"""

from google.colab import drive

drive.mount('/content/gdrive')

import pandas as pd

try:
  df_consumption = pd.read_csv('/content/Transportation_Data_-_Monthly_Data.csv')
  df_emission = pd.read_csv('/content/CO2_Emissions_From_Energy_Consumption_Transportation.csv')
except:
  df_consumption = pd.read_csv('/content/gdrive/MyDrive/Colab Notebooks/Datasets/Transportation_Data_-_Monthly_Data.csv')
  df_emission = pd.read_csv('/content/gdrive/MyDrive/Colab Notebooks/Datasets/CO2_Emissions_From_Energy_Consumption_Transportation.csv')

"""# Clean Data"""

# Replace "Not Available" with NaN
df_consumption.replace("Not Available", pd.NA, inplace=True)

# Convert columns to numeric (if not already)
df_consumption = df_consumption.apply(pd.to_numeric, errors='ignore')

# Calculate mean of each column
# Check the initial use of each fuel, and put 0 for the period before that time
df_consumption.fillna(0, inplace=True)

# Column 4 = 1+2+3
# Column 6 = 1+2+3+5
# Column 10 = 8+9
df_consumption.info()

df_consumption

# Combine all detailed petroleum data in one column
df_emission.dropna()
df_emission.info()

df_emission

"""# Data Visualization"""

import matplotlib.pyplot as plt

# Extract year from 'Month' column and convert it to numeric this is for formating of graphs
df_consumption['Year'] = pd.to_numeric(df_consumption['Month'].str.split().str[0])


# Create subplots
plt.figure(figsize=(50, 20))

#Drops the last loop as its year vs year
for i, feature in enumerate(df_consumption.columns[1:-1], 1):

    plt.subplot(2, 5, i)
    plt.scatter(x=df_consumption['Year'], y=df_consumption[feature])
    plt.xlabel('Year')
    plt.ylabel(feature)

plt.show()

"""Here we see the scatter plots for all of the data within the dataset, each point holds a value for a given month and specific fuel type."""

#Extract year from 'Month' column and convert it to numeric
df_consumption['Year'] = pd.to_numeric(df_consumption['Month'].str.split().str[0])

#Group by 'Year' and calculate the mean for each year
average_per_year = df_consumption.groupby('Year').mean(numeric_only=True)

#line plot for the average values per year
plt.figure(figsize=(15, 8))
for feature in average_per_year.columns[:-5]:
    plt.plot(average_per_year.index, average_per_year[feature], label=feature)

plt.xlabel('Year')
plt.ylabel('BCU PER TRILLION')
plt.legend(loc='upper left', bbox_to_anchor=(1, 1))
plt.grid(True)
plt.show()

# Extract year from 'Month' column and convert it to numeric this is for formating of graphs
df_emission['Year'] = pd.to_numeric(df_emission['Month'].str.split().str[0])


# Create subplots
plt.figure(figsize=(50, 30))

#Drops the last loop as its year vs year
for i, feature in enumerate(df_emission.columns[1:-1], 1):

    plt.subplot(3, 5, i)
    plt.scatter(x=df_emission['Year'], y=df_emission[feature])
    plt.xlabel('Year')
    plt.ylabel(feature)

plt.show()

"""# Data Predictions

To perform Regression, import required models.
"""

from sklearn.linear_model import LinearRegression
import numpy as np

fig = plt.figure(figsize=(50,30))

for i, feature in enumerate(df_emission.columns[1:-1], 1):
  X = df_emission[["Year"]]
  y = df_emission[[feature]]

  lin_model = LinearRegression()
  lin_model.fit(X, y)

  ax = fig.add_subplot(3,5,i)

  ax.scatter(X, y, color='gray')

  ax.plot(X, lin_model.predict(X),color='red')
  ax.set_title(f'{feature} on Year')
  ax.set_xlabel('Year')
  ax.set_ylabel(feature)

plt.show()

# Use PolynomialFeatures
from sklearn.preprocessing import PolynomialFeatures

fig = plt.figure(figsize=(50,30))

for i, feature in enumerate(df_emission.columns[1:-1], 1):
  X = df_emission[["Year"]]
  y = df_emission[[feature]]

  poly = PolynomialFeatures(degree=(1,10), include_bias=False)
  X_poly = poly.fit_transform(X)

  lin_model = LinearRegression()
  lin_model.fit(X_poly, y)

  ax = fig.add_subplot(3,5,i)

  ax.scatter(X, y, color='gray')

  ax.plot(X, lin_model.predict(X_poly),color='red')
  ax.set_title(f'{feature} on Year')
  ax.set_xlabel('Year')
  ax.set_ylabel(feature)

plt.show()

# Use SplineTransformer
from sklearn.preprocessing import SplineTransformer

fig = plt.figure(figsize=(50,30))

for i, feature in enumerate(df_emission.columns[1:-1], 1):
  X = df_emission[["Year"]]
  y = df_emission[[feature]]

  spline_transformer = SplineTransformer(n_knots=5,degree=6,include_bias=False)
  X_transform = spline_transformer.fit_transform(X)

  lin_model = LinearRegression()
  lin_model.fit(X_transform, y)

  ax = fig.add_subplot(3,5,i)

  ax.scatter(X, y, color='gray')

  ax.plot(X, lin_model.predict(X_transform),color='red')
  ax.set_title(f'{feature} on Year')
  ax.set_xlabel('Year')
  ax.set_ylabel(feature)

plt.show()

"""# Modification"""

df_agg = pd.concat([df_consumption,df_emission],axis=1)
df_agg = df_agg.apply(pd.to_numeric, errors='ignore')

df_agg = df_agg[['Coal','Natural Gas','Petroleum','Biomass','End-Use Energy Consumed',
                 'Coal Transportation Sector CO2 Emissions','Natural Gas Transportation Sector CO2 Emissions',
                 'Petroleum, Excluding Biofuels, Transportation Sector CO2 Emissions', 'Biomass Transportation Sector CO2 Emissions',
                 'Transportation Share of Electric Power Sector CO2 Emissions']]

display(df_agg)

import pandas as pd
#Imports all the data given a file path and takes care of any NULL values.
def openData(path):
  df = pd.read_csv(path)
  # Replace "Not Available" with NaN
  df.replace("Not Available", pd.NA, inplace=True)

  # Convert columns to numeric (if not already)
  df = df.apply(pd.to_numeric, errors='ignore')

  # Calculate mean of each column
  # Check the initial use of each fuel, and put 0 for the period before that time
  df.fillna(0, inplace=True)
  return df



def visulizeData(df):
  # Extract year from 'Month' column and convert it to numeric this is for formating of graphs
  df['Year'] = pd.to_numeric(df['Month'].str.split().str[0])


  # Create subplots
  plt.figure(figsize=(50, 20))

  #Drops the last loop as its year vs year
  for i, feature in enumerate(df_consumption.columns[1:-1], 1):

    plt.subplot(2, 5, i)
    plt.scatter(x=df_consumption['Year'], y=df_consumption[feature])
    plt.xlabel('Year')
    plt.ylabel(feature)

  plt.show()